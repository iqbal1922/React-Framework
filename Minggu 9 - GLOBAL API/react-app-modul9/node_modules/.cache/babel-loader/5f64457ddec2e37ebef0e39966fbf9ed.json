{"ast":null,"code":"var _jsxFileName = \"/Users/md1010/Documents/Semester 6/Pemrogramman Framewrok/firsty-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'; //import reportWebVitals from './reportWebVitals';\n\nimport * as serviceWorker from './serviceWorker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Test extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hello: \"World!\"\n    };\n  }\n\n  componentWillMount() {\n    console.log(\"componentWillMount()\");\n  }\n\n  componentDidMount() {\n    console.log(\"componentDidMount()\");\n  }\n\n  changeState() {\n    this.setState({\n      hello: \"Geek!\"\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"GeeksForGeeks.org, Hello\", this.state.hello]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }, this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"shouldComponentUpdate()\");\n    return true;\n  }\n\n  componentWillUpdate() {\n    console.log(\"componentWillUpdate()\");\n  }\n\n  componentDidUpdate() {\n    console.log(\"componentDidUpdate()\");\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Test, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 58,\n  columnNumber: 3\n}, this), document.getElementById('root')); // const HelloComponent = () => {\n//     return HelloComponent }\n//     class StateFullComponent extends React.Component{\n//       render() {\n//         return<p>StateFullComponent</p>\n//       }\n//     }\n//     ReactDOM.render(<StateFullComponent />,document.getElementById('root'));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/md1010/Documents/Semester 6/Pemrogramman Framewrok/firsty-app/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","Test","Component","constructor","props","state","hello","componentWillMount","console","log","componentDidMount","changeState","setState","render","shouldComponentUpdate","nextProps","nextState","componentWillUpdate","componentDidUpdate","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CACA;;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;;;AAGA,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EACX;AACI,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAG;AAAV,KAAb;AACH;;AAEDC,EAAAA,kBAAkB,GAClB;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;;AAEDC,EAAAA,iBAAiB,GACjB;AACIF,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH;;AAEDE,EAAAA,WAAW,GACX;AACI,SAAKC,QAAL,CAAc;AAAEN,MAAAA,KAAK,EAAG;AAAV,KAAd;AACH;;AAEDO,EAAAA,MAAM,GACN;AACI,wBACI;AAAA,8BACA;AAAA,+CAA8B,KAAKR,KAAL,CAAWC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAEDQ,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EACrB;AACIR,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,WAAO,IAAP;AACH;;AAEDQ,EAAAA,mBAAmB,GACnB;AACIT,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH;;AAEDS,EAAAA,kBAAkB,GAClB;AACIV,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;;AA/CgC;;AAiDnCX,QAAQ,CAACe,MAAT,eACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,QADF,EAEEM,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF,E,CAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;;AACApB,aAAa,CAACqB,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\n  \nclass Test extends React.Component { \n  constructor(props) \n  { \n      super(props); \n      this.state = { hello : \"World!\" }; \n  } \n\n  componentWillMount() \n  { \n      console.log(\"componentWillMount()\"); \n  } \n\n  componentDidMount() \n  { \n      console.log(\"componentDidMount()\"); \n  } \n\n  changeState() \n  { \n      this.setState({ hello : \"Geek!\" }); \n  } \n\n  render() \n  { \n      return ( \n          <div> \n          <h1>GeeksForGeeks.org, Hello{ this.state.hello }</h1> \n          <h2> \n     \n          </h2> \n          </div>); \n  } \n\n  shouldComponentUpdate(nextProps, nextState) \n  { \n      console.log(\"shouldComponentUpdate()\"); \n      return true; \n  } \n\n  componentWillUpdate() \n  { \n      console.log(\"componentWillUpdate()\"); \n  } \n\n  componentDidUpdate() \n  { \n      console.log(\"componentDidUpdate()\"); \n  } \n}  \nReactDOM.render( \n  <Test />, \n  document.getElementById('root')); \n\n\n// const HelloComponent = () => {\n//     return HelloComponent }\n\n//     class StateFullComponent extends React.Component{\n//       render() {\n//         return<p>StateFullComponent</p>\n//       }\n//     }\n\n//     ReactDOM.render(<StateFullComponent />,document.getElementById('root'));\n    \n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();"]},"metadata":{},"sourceType":"module"}